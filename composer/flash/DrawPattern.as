package {	import fl.controls.TextInput;	import flash.events.*;	import flash.display.*;	import flash.text.TextField;	import fl.controls.Button;		public class DrawPattern extends MovieClip {					var patternContainer:MovieClip = new MovieClip(); 				public function render(score, total_bank_options, container, number_of_steps, step_time) { 						var total_options_number:int = 0; 			var angle_per_step:Number = 0;						   			while (this.patternContainer.numChildren > 0) {     			this.patternContainer.removeChildAt(this.patternContainer.numChildren-1);   			}						container.addChild(patternContainer);			angle_per_step = 360 / number_of_steps;						//work out number of bank options 			for(var i:int = 0;i<score.length;i++){				for(var j:int = 0;j<score[i].length;j++){					total_options_number++ 				}			}									var radius_increment = 240 / total_options_number; 						var degrees_per_second = 360 / (number_of_steps * step_time / 1000);			//trace("number_of_steps" + number_of_steps);			//trace("step_time" + step_time);			//trace("degrees_per_second " + degrees_per_second);						for(i = 0;i<score.length;i++){				for(j = 0;j<score[i].length;j++){					for(var k:int = 0;k<score[i][j].length;k++){					//trace("TIME : Bank: " + i + "  Bank option: " + j + "  Step: " +k + " action:" + score[i][j][k]['time'] + "offset"+  score[i][j][k]['offset']);							if((score[i][j][k]['action'] == 'play' || score[i][j][k]['action'] == 'loop') && score[i][j][k]['offset'] == '0') { 							var arc:Arc = new Arc(); 							var patternSubContainer:MovieClip = new MovieClip;							patternSubContainer.graphics.lineStyle(4,0x000000, 1, true, LineScaleMode.ROUND, CapsStyle.NONE, JointStyle.MITER, 0);																					radius = (i*radius_increment) + (j*radius_increment) + 70; 							start_angle = (angle_per_step * k);							end_angle = angle_per_step + start_angle;														//if a time is set in the score, override the single step assumption 							if (score[i][j][k]['time'] != undefined) {								end_angle = (score[i][j][k]['time'] * degrees_per_second / 1000); 							}																					start_angle +=90;							end_angle +=90;														//trace("rad =" + radius + "  start =" + start_angle + " end angle =" + end_angle); 							arc.draw_arc(patternSubContainer, 350,350,radius, start_angle, end_angle, 1);							patternContainer.addChild(patternSubContainer);						}					}				}			}		}	}}