package {	import fl.controls.TextInput;	import flash.events.*;	import flash.display.*;	import flash.text.TextField;	import fl.controls.Button;	import flash.media.SoundMixer;	import flash.media.SoundChannel;	public class PlayBack extends MovieClip{				public var step_time:Number; //indicates the length of time each step plays for 		public var step_number:int = 0; //indicates which step the timer is currently on		public var reload_sounds:int = 1; ////use this to check if we need to recreate all the sound objects		public var play_status:int = 0;		public var jsonData:Object;		public var grid:Object;		public var soundContainer:Object;		public var volumeArray:Array;		public var score:Array;		public var monitorArray:Array = new Array();		public var monitorContainer:MovieClip = new MovieClip;				//other useful objects 		var myTimer:AccurateTimer = new AccurateTimer(0, 1000);			var render:Render = new Render();				function make(jsonData, volumeArray, score, scrubberContainer, soundContainer, grid_top, grid_left, step_time, step_number) {			render.drawPlayhead(jsonData, scrubberContainer, 0,  grid_top, grid_left);			this.jsonData = jsonData;			this.soundContainer = soundContainer;			this.volumeArray = volumeArray;			this.score = score; 			this.step_time = step_time;			this.step_number = step_number;		}				public function go(jsonData, volumeArray, grid, soundContainer) {			this.grid = grid;			this.volumeArray = volumeArray;			calculateStepTime();			SoundMixer.stopAll(); // stop it from playing two things at once			myTimer.start();			play_status = 1;			playStep(true);		}				public function calculateStepTime() {			myTimer = new AccurateTimer(step_time, 1000);			myTimer.addEventListener(TimerEvent.TIMER, step);		}						public function step(event:TimerEvent){			step_number++;			playStep(false);			dispatchEvent(new Event("movePlayHead", true)); 		}									public function my_stop() {			play_status = 0; 			myTimer.stop();			SoundMixer.stopAll();						var bank_index =0; 			for each (var bank:Object in jsonData['banks']) {					//loop over each bank option 				bank_option_index = 0;				for each (var bank_option:Object in bank['bank_options']) {					if(monitorArray[bank_index][bank_option_index] is MovieClip) {  						monitorArray[bank_index][bank_option_index].alpha = 0.1;					}					bank_option_index++; 				}				bank_index++;			}		}				public function movePlayHead(position) {			step_number = position;			render.movePlayhead(step_number);			dispatchEvent(new Event("movePlayHead", true)); 		}				public function playStep(first_played_step) { 				if (step_number == jsonData['project_info']['steps']) { //stop playback if we've got to the end of the track				 my_stop(); 			}						else {				render.movePlayhead(step_number);				for(bank_index = 0; bank_index < score.length; bank_index++) { 					for(bank_option_index = 0; bank_option_index < score[bank_index].length; bank_option_index++) {												trace("Action bank inside:" + bank_index + "  bank option:" + bank_option_index + " check_step: " + step_number +  "  val:" +score[bank_index][bank_option_index][step_number]['action']);						if(score[bank_index][bank_option_index][step_number]['action'] == 'play') {								 						//play implies stop 							if(jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'] is SoundChannel) { 								jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'].stop();							}								my_play(0 ,0, bank_index, bank_option_index);						}												if(score[bank_index][bank_option_index][step_number]['action'] == 'play_retrigger') {	 						//play implies stop 														if(jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'] is SoundChannel) { 								jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'].stop();							}								my_play(score[bank_index][bank_option_index][step_number]['offset'] ,0, bank_index, bank_option_index);						}																		if(score[bank_index][bank_option_index][step_number]['action'] == 'loop' ) { 														//play implies stop 	 						if(jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'] is SoundChannel) { 								jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'].stop();							}																my_play(0,1000, bank_index, bank_option_index);						}												if(score[bank_index][bank_option_index][step_number]['action'] == 'loop_retrigger') { 							//play implies stop 	 						if(jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'] is SoundChannel) { 								jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'].stop();							}														my_play(0,1000, bank_index, bank_option_index);						}																								if(score[bank_index][bank_option_index][step_number]['action'] == 'stop' ) {						 	if(jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'] is SoundChannel) { 								jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'].stop();								monitorArray[bank_index][bank_option_index].alpha = 0.1;							}						}					}				}			}		}				public function my_play(offset, loop, bank_index, bank_option_index) { 			if (jsonData['banks'][bank_index]['bank_options'][bank_option_index]['file_location'] != undefined) { 				var file_location = jsonData['banks'][bank_index]['bank_options'][bank_option_index]['file_location'];				if (file_location != '') { 					var file_location_array:Array = file_location.split(".");					var clean_file_location = file_location_array[0];					var sound = soundContainer[clean_file_location];										jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'] = sound.play(offset, loop);					jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'].addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);					monitorArray[bank_index][bank_option_index].alpha = 1;					function soundCompleteHandler(event) { 						monitorArray[bank_index][bank_option_index].alpha = 0.1;										}				}			}		}				public function drawMonitor(jsonData, grid_top, grid_left, monitorContainer) { 						while (monitorContainer.numChildren > 0) {				monitorContainer.removeChildAt(	monitorContainer.numChildren-1);			} 						var cumulatuive_y_offset = grid_top +4;			var bank_index =0; 			for each (var bank:Object in jsonData['banks']) {					//loop over each bank option 				bank_option_index = 0;				monitorArray[bank_index] = new Array();				for each (var bank_option:Object in bank['bank_options']) {					  					monitorArray[bank_index][bank_option_index] = new MovieClip;					monitorArray[bank_index][bank_option_index].graphics.beginFill(0x66CC66);					monitorArray[bank_index][bank_option_index].graphics.drawCircle(grid_left-10, cumulatuive_y_offset, 5);					monitorArray[bank_index][bank_option_index].graphics.endFill();					monitorArray[bank_index][bank_option_index].alpha = 0.1;					monitorContainer.addChild(monitorArray[bank_index][bank_option_index]); 					bank_option_index++; 					cumulatuive_y_offset += 26;				}				bank_index++;				cumulatuive_y_offset += 56;			}		}	}}