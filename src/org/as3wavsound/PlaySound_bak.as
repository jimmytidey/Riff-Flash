package   {  	import flash.display.Sprite;  	import flash.events.MouseEvent;  	import flash.net.URLLoader;  	import flash.net.URLRequest;  	import flash.events.Event;  	import flash.utils.ByteArray;  	import flash.media.Sound; 	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import org.as3wavsound.WavSound;  	import org.as3wavsound.WavSoundChannel;	import org.as3wavsound.WavSoundPlayer;	import flash.media.SoundLoaderContext;	import flash.display.*; 	import flash.media.SoundMixer;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.events.ProgressEvent;	      public final class PlaySound extends MovieClip       {  	 	var tts:WavSound;	 	var soundUrl:String;		var soundType:String;		var repeats:String;		var repeatNumber:int;		var Mp3:Sound; 		var statusTextField:TextField  = new TextField();	 	var Mp3Channel:SoundChannel = new SoundChannel();		var WavChannel:WavSoundChannel; 		var nowPlaying:String = 'no';		var volumeLevel:Number; 		var playerTransform:SoundTransform;		var statusMC:MovieClip;		var cumulative_y:int = 0;		var totalRemainingLoad:int = 0;		        public function PlaySound(soundUrl:String, repeats:String, volumeLevel:Number, statusMC):void {  						//set variables of this object when it's initiated 			this.volumeLevel = volumeLevel; 					 	this.soundUrl = soundUrl;			this.statusMC = statusMC;			this.repeats = repeats;			 			//decide if this is a wav or an mp3		 	var typeArray:Array; 				typeArray = this.soundUrl.split('.'); 			var arrayLastPosition:int = typeArray.length -1;						//play a wav			if (typeArray[arrayLastPosition] == 'wav') {				soundType='wav';				loadWav();  			}						//play an mp3			else {				soundType='mp3';				loadMP3()			}						//set the amount of repeating necessary 			if (repeats == 'yes') {repeatNumber=1000;}			else {repeatNumber = 1;}						//make a soundTransform for setting the volume level 			playerTransform = new SoundTransform((volumeLevel/100));		}	            		public function loadMP3() {			Mp3 = new Sound();						//Do streaming 			//var context:SoundLoaderContext = new SoundLoaderContext(8000, false);			//Mp3.load(new URLRequest(soundUrl),context);								//No streaming 			Mp3.load(new URLRequest(soundUrl));			statusTextField.autoSize = TextFieldAutoSize.LEFT;			Mp3.addEventListener(ProgressEvent.PROGRESS, progressHandler);			this.statusMC.addChild(statusTextField);		}			public function loadWav() { 			var urlRequest:URLRequest = new URLRequest(soundUrl); 			var wav:URLLoader = new URLLoader();  			wav.dataFormat = 'binary';  			wav.load(urlRequest);			wav.addEventListener(ProgressEvent.PROGRESS, progressHandler);			this.statusMC.addChild(statusTextField);						wav.addEventListener(Event.COMPLETE, playWav);  		}				private function progressHandler(event:ProgressEvent):void {			var loadTime:Number = event.bytesLoaded / event.bytesTotal;			var LoadPercent:uint = Math.round(100 * loadTime);			statusTextField.text =  LoadPercent + ' % loaded ';		}		   		public function playWav(e:Event) {			trace('hi');			tts = new WavSound(e.target.data as ByteArray);			tts.play(); 		}		 		public function playBack() {			tts.play(); 						if (soundType == 'wav') {				trace('wav playback called') 				//WavChannel.play();				//WavChannel.soundTransform = playerTransform;				nowPlaying = 'true';			}						if (soundType == 'mp3') {				Mp3Channel = Mp3.play(0, this.repeatNumber);				Mp3Channel.soundTransform = playerTransform;				nowPlaying = 'true';			}		}		 		public function stopPlayBack() {					if (soundType == 'wav') { 				//	if (nowPlaying == 'true') {WavChannel.stop();} 			}						else {				if (nowPlaying == 'true') {Mp3Channel.stop();} 			}						nowPlaying = 'false';		}		 		 		// this displays the total amoutn of loading left to do		public function drawStatus(statusMC:MovieClip) {			var statusTextField:TextField  = new TextField();			statusTextField.text = 'Total load amount left'+this.totalRemainingLoad;			statusMC.addChild(statusTextField); 		}			 }   }  